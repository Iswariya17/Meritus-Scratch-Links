const ArgumentType = require('../../extension-support/argument-type');
const BlockType = require('../../extension-support/block-type');
const Cast = require('../../util/cast');
const log = require('../../util/log');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { promisify} = require('util');
// const creds = require('google-auth-library/S4AIWS-f90b1b3055f2.json');
const regeneratorRuntime = require("regenerator-runtime");
const GoogleAuth = require('google-auth-library');
let text ,value;

class Scratch3sheet {
    constructor (runtime) {
        this.runtime = runtime;
    }

    getInfo () {
        return {
            id: 'sheets',
            name: 'Sheets',
            blocks: [
                {
                    opcode: 'writeLog',
                    blockType: BlockType.COMMAND,
                    text: 'Sheet id: [TEXT]',
                    arguments: {
                        TEXT: {
                            type: ArgumentType.STRING,
                            defaultValue: " "
                        }
                    }
                },
                 {
                    opcode: 'write',
                    blockType: BlockType.COMMAND,
                    text: 'Input [input] to Column[column] and Row [row]',
                    arguments: {
                        input: {
                            type: ArgumentType.STRING,
                            defaultValue: "50"
                        },
                         column: {
                            type: ArgumentType.STRING,
                            defaultValue: "0"
                        },
                         row: {
                            type: ArgumentType.STRING,
                            defaultValue: "0"
                        }

                    }
                },
                {
              opcode: 'read',
              text: "Read input to Column[column] and Row[row]",
              blockType: BlockType.REPORTER,
              arguments: {
                        
                         column: {
                            type: ArgumentType.STRING,
                            defaultValue: "0"
                        },
                         row: {
                            type: ArgumentType.STRING,
                            defaultValue: "0"
                        }

                    }
              },
            ],
            menus: {
            }
        };
    }

    writeLog (args) {
         text = Cast.toString(args.TEXT);
       // const doc = new GoogleSpreadsheet('19y9eaQJXS6dGqI_ASfIRsP57_PTM8i3B2Wzi4jmo-uQ');
        /*async function accessSpreadsheet() {
                const doc = new GoogleSpreadsheet(text);
                await promisify(doc.useServiceAccountAuth)(creds);
                const info = await promisify(doc.getInfo)();
                const sheets = info.worksheets[0];
                console.log(sheet.title);

            // body...
        }
        accessSpreadsheet();*/


  

        (async function() {

            const doc = new GoogleSpreadsheet(text);

// Initialize Auth - see more available options at https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
await doc.useServiceAccountAuth({
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC79zlCFA1M2vlu\n8gMZPcygQ2cTkxHb1PJi3FY/8RJzcErxNMSpgi/4NTJfF8ARHD3XVKxPZaMl0qcG\nCIo2CTHmVHLtF4RVRdY8ccHl1nR37WlU8zEe3WpUYeQ+7xkzoEYUSoZ7C5lFMpO5\nXssQEvtG6c5OrEjGVd5fklShYNVa2bmm+XmVsIyjIMEDRrowc+96JEqzkRdBFtQD\nLoaa+6kykbstyGsMk4huNUR+qg0Zy5MpRInKQzQEqbIGl8iye4d4cSvReqE8VtCp\nbAXRCjNm6LnaKojJcu1bU89qjbpQ5vdqPjm+hY30gdlJppZAnvXT9Kcyj2eoJuoF\nua74IRpTAgMBAAECggEAPXgDyZA1KUUS/S03xjFnkaF5O/WEiZeCDMJxkkeL+SRn\n3amcBrMEbO84odBqhy3tK1YNY4mhaOUSqe5xBGrNXr2PN+nQ5PIJtYqeFkOjovSI\n1bcSAT33X9EDi3E1lKR9RnV4tRR98xsvJBfT4FXUxsP/K8s7oWDDcA2yj3PTUfoC\nOe5bpRRR5NJ0pmoy9M9UIjE6KSyxrHFVd/Imi7lGbRsOmIcT3QSp7fLhfTydsnnW\nugUIu18I6bWWIAo9PlWArcmeBnL/OYp1oq0/usnEzuA5097wxaE47GckP2r8cNLO\n+da6CTJAKf2woE+vHnInCCDt+R31MBfeloW7MfMKQQKBgQDdRmF5EsZfB+Dy7vb5\nGSJS+yu/CS41r9WUZSIQQKQWjVmziARq4ynrTH3Gi98RxPGxac5fpDb5AwrI0U3o\nr/tUqk1WUEvEsvMQ/gEsbYbUDjZDqfwtbDWtq4LDUSgV3SFv1MgOsyhcPsOgsOrA\nNHCD5eo/gDEwNDvQEqQJ3XLAhwKBgQDZdqkixpH9hvBg8RB6fEvd1upyUGJeizLk\nWBrQZNsI9zCgsE4HkP29yAae6h6n0xa86XZSqQ+GGycVSey9B1doLtE573HgHRot\nyWNd7WKySHzYX3kflfoWuIL39CN4Wr6OaJOmODmhXdrz6gzH1O8GTeLFaiy84AeX\n6gztu25G1QKBgQDcFGdYQ3s4A58SIOlVolEIVbcR/7CNR0DXoqr5nUFXCOnB7bPv\nF9eWp3KlqnKIuuhlO8Y+TBc9HnB4gezKVVZVxDi9c4mYrx+gs/I43QrwGN6R+BzQ\nlMLi5CZf23VSIaljEDCWpkyrSuXKCozB9KZAGcodtIO33QvsjM3I3g+HOwKBgQCb\nAWPJ7/R73EVXND1ksVh6hgiS9w1HCr152fsy89DU8S1uPH1CE21qazuc5pB3W5Vn\njpnSjcMM+im/mPPwQV1iW4yzWSO4dcYFQPldKCojnluu906k3whmTZq9Fv55eWU+\nqPglkQozJW0+U2RMxFCkE7xCr024S4/eDuysP995CQKBgQCS30kDcIUjoxcGuFjO\n7x8GWpR+rpdm9fTUPW4IPGTVSED3i/PaS0WbGECmNDSxiWfx9L6Eq3qsii07c9rw\n4FmUdREb0i1VjjrNTR0Phmls3KShFOZPsB5T1Kh4cNBNTi4dguaJYM+94FW1DuZr\nNj0k1N74+irLKDygMUO5pwpmlw==\n-----END PRIVATE KEY-----\n",
  "client_email": "sheets@named-nomad-305210.iam.gserviceaccount.com",});

await doc.loadInfo(); // loads document properties and worksheets
console.log(doc.title);


 
}());

    




      
                
    }


    write(args){
            let  input = Cast.toString(args.input);
            let  column = Cast.toString(args.column);
            let  row = Cast.toString(args.row);


              (async function() {

            const doc = new GoogleSpreadsheet(text);

// Initialize Auth - see more available options at https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
await doc.useServiceAccountAuth({
 "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC79zlCFA1M2vlu\n8gMZPcygQ2cTkxHb1PJi3FY/8RJzcErxNMSpgi/4NTJfF8ARHD3XVKxPZaMl0qcG\nCIo2CTHmVHLtF4RVRdY8ccHl1nR37WlU8zEe3WpUYeQ+7xkzoEYUSoZ7C5lFMpO5\nXssQEvtG6c5OrEjGVd5fklShYNVa2bmm+XmVsIyjIMEDRrowc+96JEqzkRdBFtQD\nLoaa+6kykbstyGsMk4huNUR+qg0Zy5MpRInKQzQEqbIGl8iye4d4cSvReqE8VtCp\nbAXRCjNm6LnaKojJcu1bU89qjbpQ5vdqPjm+hY30gdlJppZAnvXT9Kcyj2eoJuoF\nua74IRpTAgMBAAECggEAPXgDyZA1KUUS/S03xjFnkaF5O/WEiZeCDMJxkkeL+SRn\n3amcBrMEbO84odBqhy3tK1YNY4mhaOUSqe5xBGrNXr2PN+nQ5PIJtYqeFkOjovSI\n1bcSAT33X9EDi3E1lKR9RnV4tRR98xsvJBfT4FXUxsP/K8s7oWDDcA2yj3PTUfoC\nOe5bpRRR5NJ0pmoy9M9UIjE6KSyxrHFVd/Imi7lGbRsOmIcT3QSp7fLhfTydsnnW\nugUIu18I6bWWIAo9PlWArcmeBnL/OYp1oq0/usnEzuA5097wxaE47GckP2r8cNLO\n+da6CTJAKf2woE+vHnInCCDt+R31MBfeloW7MfMKQQKBgQDdRmF5EsZfB+Dy7vb5\nGSJS+yu/CS41r9WUZSIQQKQWjVmziARq4ynrTH3Gi98RxPGxac5fpDb5AwrI0U3o\nr/tUqk1WUEvEsvMQ/gEsbYbUDjZDqfwtbDWtq4LDUSgV3SFv1MgOsyhcPsOgsOrA\nNHCD5eo/gDEwNDvQEqQJ3XLAhwKBgQDZdqkixpH9hvBg8RB6fEvd1upyUGJeizLk\nWBrQZNsI9zCgsE4HkP29yAae6h6n0xa86XZSqQ+GGycVSey9B1doLtE573HgHRot\nyWNd7WKySHzYX3kflfoWuIL39CN4Wr6OaJOmODmhXdrz6gzH1O8GTeLFaiy84AeX\n6gztu25G1QKBgQDcFGdYQ3s4A58SIOlVolEIVbcR/7CNR0DXoqr5nUFXCOnB7bPv\nF9eWp3KlqnKIuuhlO8Y+TBc9HnB4gezKVVZVxDi9c4mYrx+gs/I43QrwGN6R+BzQ\nlMLi5CZf23VSIaljEDCWpkyrSuXKCozB9KZAGcodtIO33QvsjM3I3g+HOwKBgQCb\nAWPJ7/R73EVXND1ksVh6hgiS9w1HCr152fsy89DU8S1uPH1CE21qazuc5pB3W5Vn\njpnSjcMM+im/mPPwQV1iW4yzWSO4dcYFQPldKCojnluu906k3whmTZq9Fv55eWU+\nqPglkQozJW0+U2RMxFCkE7xCr024S4/eDuysP995CQKBgQCS30kDcIUjoxcGuFjO\n7x8GWpR+rpdm9fTUPW4IPGTVSED3i/PaS0WbGECmNDSxiWfx9L6Eq3qsii07c9rw\n4FmUdREb0i1VjjrNTR0Phmls3KShFOZPsB5T1Kh4cNBNTi4dguaJYM+94FW1DuZr\nNj0k1N74+irLKDygMUO5pwpmlw==\n-----END PRIVATE KEY-----\n",
  "client_email": "sheets@named-nomad-305210.iam.gserviceaccount.com",
});

await doc.loadInfo(); // loads document properties and worksheets
console.log(doc.title);


const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]


await sheet.loadCells('A1:E10'); // loads a range of cells
const a1 = sheet.getCell(column, row);


a1.value = input;
await sheet.saveUpdatedCells();






 
}());




    }

    read(args){

         let  column = Cast.toString(args.column);
            let  row = Cast.toString(args.row);


          let result =  (async function() {

            const doc = new GoogleSpreadsheet(text);

// Initialize Auth - see more available options at https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
await doc.useServiceAccountAuth({
 "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC79zlCFA1M2vlu\n8gMZPcygQ2cTkxHb1PJi3FY/8RJzcErxNMSpgi/4NTJfF8ARHD3XVKxPZaMl0qcG\nCIo2CTHmVHLtF4RVRdY8ccHl1nR37WlU8zEe3WpUYeQ+7xkzoEYUSoZ7C5lFMpO5\nXssQEvtG6c5OrEjGVd5fklShYNVa2bmm+XmVsIyjIMEDRrowc+96JEqzkRdBFtQD\nLoaa+6kykbstyGsMk4huNUR+qg0Zy5MpRInKQzQEqbIGl8iye4d4cSvReqE8VtCp\nbAXRCjNm6LnaKojJcu1bU89qjbpQ5vdqPjm+hY30gdlJppZAnvXT9Kcyj2eoJuoF\nua74IRpTAgMBAAECggEAPXgDyZA1KUUS/S03xjFnkaF5O/WEiZeCDMJxkkeL+SRn\n3amcBrMEbO84odBqhy3tK1YNY4mhaOUSqe5xBGrNXr2PN+nQ5PIJtYqeFkOjovSI\n1bcSAT33X9EDi3E1lKR9RnV4tRR98xsvJBfT4FXUxsP/K8s7oWDDcA2yj3PTUfoC\nOe5bpRRR5NJ0pmoy9M9UIjE6KSyxrHFVd/Imi7lGbRsOmIcT3QSp7fLhfTydsnnW\nugUIu18I6bWWIAo9PlWArcmeBnL/OYp1oq0/usnEzuA5097wxaE47GckP2r8cNLO\n+da6CTJAKf2woE+vHnInCCDt+R31MBfeloW7MfMKQQKBgQDdRmF5EsZfB+Dy7vb5\nGSJS+yu/CS41r9WUZSIQQKQWjVmziARq4ynrTH3Gi98RxPGxac5fpDb5AwrI0U3o\nr/tUqk1WUEvEsvMQ/gEsbYbUDjZDqfwtbDWtq4LDUSgV3SFv1MgOsyhcPsOgsOrA\nNHCD5eo/gDEwNDvQEqQJ3XLAhwKBgQDZdqkixpH9hvBg8RB6fEvd1upyUGJeizLk\nWBrQZNsI9zCgsE4HkP29yAae6h6n0xa86XZSqQ+GGycVSey9B1doLtE573HgHRot\nyWNd7WKySHzYX3kflfoWuIL39CN4Wr6OaJOmODmhXdrz6gzH1O8GTeLFaiy84AeX\n6gztu25G1QKBgQDcFGdYQ3s4A58SIOlVolEIVbcR/7CNR0DXoqr5nUFXCOnB7bPv\nF9eWp3KlqnKIuuhlO8Y+TBc9HnB4gezKVVZVxDi9c4mYrx+gs/I43QrwGN6R+BzQ\nlMLi5CZf23VSIaljEDCWpkyrSuXKCozB9KZAGcodtIO33QvsjM3I3g+HOwKBgQCb\nAWPJ7/R73EVXND1ksVh6hgiS9w1HCr152fsy89DU8S1uPH1CE21qazuc5pB3W5Vn\njpnSjcMM+im/mPPwQV1iW4yzWSO4dcYFQPldKCojnluu906k3whmTZq9Fv55eWU+\nqPglkQozJW0+U2RMxFCkE7xCr024S4/eDuysP995CQKBgQCS30kDcIUjoxcGuFjO\n7x8GWpR+rpdm9fTUPW4IPGTVSED3i/PaS0WbGECmNDSxiWfx9L6Eq3qsii07c9rw\n4FmUdREb0i1VjjrNTR0Phmls3KShFOZPsB5T1Kh4cNBNTi4dguaJYM+94FW1DuZr\nNj0k1N74+irLKDygMUO5pwpmlw==\n-----END PRIVATE KEY-----\n",
  "client_email": "sheets@named-nomad-305210.iam.gserviceaccount.com",
});

await doc.loadInfo(); // loads document properties and worksheets


const sheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]


await sheet.loadCells('A1:E10'); // loads a range of cells
const a1 = sheet.getCell(column, row);
console.log(a1.value);
value = a1.value;
return value;



}());

return result;

    }






}

module.exports = Scratch3sheet;