const ArgumentType = require('../../extension-support/argument-type');
const BlockType = require('../../extension-support/block-type');
const Cast = require('../../util/cast');
const log = require('../../util/log');
const path = require('path');
const fs = require('fs');
const {createWorker,PSM } = require( 'tesseract.js');
const Tesseract = require( 'tesseract.js');
let son;
class Scratch3ocr{
    constructor (runtime) {
        this.runtime = runtime;

        let video = document.createElement("video");
         video.width = 480;
        video.height = 360;
        video.autoplay = true;
        video.style.display = "none";
        this.video = video;
        this.ratio = 0.75;
        this.interval = 200;


    let media = navigator.mediaDevices.getUserMedia({ // for video
      video: true,
      audio: false
    });

    media.then((stream) => {
      this.video.srcObject = stream;
    });

       this.runtime.ioDevices.video.enableVideo();
    }

    getInfo () {
        return {
            id: 'ocr',
            name: 'Printed text recognition',
            blocks: [
                {
                    opcode: 'takePhoto',
                     blockType: BlockType.COMMAND,
                      text: "takePhoto"
                 },
                  {
                    opcode: 'printed_result',
                     text: "text"[this.value],
                    blockType: BlockType.REPORTER
                 },
            ],
            menus: {
            }
        };
    }

    writeLog (args) {
        const text = Cast.toString(args.TEXT);
        log.log(text);
    }

     takePhoto (args, util) {
           imageData  = this.runtime.ioDevices.video.getSnapshot();
           console.log(imageData);



        var image = new Image();
        image.src = imageData;
        this.imageinfo = document.body.appendChild(image);
        //const filename = this.imageinfo;
        
const worker = createWorker();
const rectangle = { left: 0, top: 0, width: 500, height: 250 };


(async () => {
  await worker.load();
  await worker.loadLanguage('eng');
  await worker.initialize('eng');
  await worker.setParameters({
    tessedit_pageseg_mode: PSM.SINGLE_BLOCK,
    // tessedit_char_whitelist: '0123456789',
  });
  try{
  const { data: { text } } = await worker.recognize(this.imageinfo);
  console.log("image --->",text);
  son = text;
  await worker.terminate();
  }catch(err){
      son = "null";
  }
  
})();
       }

printed_result(){
return son;
}

}

module.exports = Scratch3ocr;
