const ArgumentType = require('../../extension-support/argument-type');
const BlockType = require('../../extension-support/block-type');
const Cast = require('../../util/cast');
const log = require('../../util/log');
const path = require('path');
const tracking = require('tracking/build/tracking-min.js');
const AColorPicker = require('a-color-picker');
const getColors = require('get-image-colors');
var base64ToImage = require('base64-to-image');
const fs = require('fs');
const analyze = require('rgbaster');
const ColorThief = require('colorthief');
const { getColorFromURL } = require('color-thief-node');
const regeneratorRuntime = require("regenerator-runtime");
var crossOrigin = require('cross-origin');


var src = require('src');
let first_color,second_color,third_color,first_color_count,second_color_count,third_color_count;
let first_color_rgb,first_color_red,first_color_green,first_color_blue,second_color_red,second_color_green,second_color_blue;
let third_color_red,third_color_blue, third_color_green;




class Scratch3colour {
    constructor (runtime) {
       this.runtime = runtime;

        //this.faces = [];


        let video = document.createElement("video");
        video.width = 480;
        video.height = 360;
        video.autoplay = true;
        video.style.display = "none";
        this.video = video;
        this.ratio = 0.75;
        this.interval = 200;
            this.imageinfo;

    let media = navigator.mediaDevices.getUserMedia({
      video: true,
      audio: false
    });

    media.then((stream) => {
      this.video.srcObject = stream;
    });

    this.runtime.ioDevices.video.enableVideo();
    }

    getInfo () {
        return {
            id: 'colour',
            name: 'Colour',
            blocks: [
            		
               
                 {
                    opcode: 'takePhoto',
                     blockType: BlockType.COMMAND,
                      text: "takePhoto"
                 },
		       
		      {
		      opcode: 'first_color_red',
		      text: "text"[this.value],
		      blockType: BlockType.REPORTER
		      },
		      {
		      opcode: 'first_color_green',
		      text: "text"[this.value],
		      blockType: BlockType.REPORTER
		      },
		      {
		      opcode: 'first_color_blue',
		      text: "text"[this.value],
		      blockType: BlockType.REPORTER
		      },
		      {
		      opcode: 'second_color_red',
		      text: "text"[this.value],
		      blockType: BlockType.REPORTER
		      },
		      {
		      opcode: 'second_color_green',
		      text: "text"[this.value],
		      blockType: BlockType.REPORTER
		      },
		      {
		      opcode: 'second_color_blue',
		      text: "text"[this.value],
		      blockType: BlockType.REPORTER
		      },
		      {
		      opcode: 'third_color_red',
		      text: "text"[this.value],
		      blockType: BlockType.REPORTER
		      },
		      {
		      opcode: 'third_color_green',
		      text: "text"[this.value],
		      blockType: BlockType.REPORTER
		      },
		      {
		      opcode: 'third_color_blue',
		      text: "text"[this.value],
		      blockType: BlockType.REPORTER
		      }
              
            ],
            menus: {
            }
        };
    }

   

     takePhoto (args, util) {
           imageData  = this.runtime.ioDevices.video.getSnapshot();
     
		/*	getColors(path.join(__dirname, 'https://themillions.com/wp-content/uploads/2019/03/david-jorre-712468-unsplash.jpg' )).then(colors => {
				console.log(colors.map(color => color.hex()));
// => ['#FFFFFF', '#123123', '#F0F0F0']
  // `colors` is an array of color objects
				})


		*/

		console.log(imageData);
		
		
	

(async () => {

			
			const result = await analyze(imageData,  { ignore: [ 'rgb(255,255,255)', 'rgb(0,0,0)' ] }); // also supports base64 encoded image strings
			first_color =getRGB(result[0].color);
			first_color_red =first_color.red;
			first_color_green =first_color.green;
			first_color_blue =first_color.blue;



			second_color =getRGB( result[1].color);
			second_color_red =second_color.red;
			second_color_green =second_color.green;
			second_color_blue =second_color.blue;


			third_color = getRGB(result[2].color);
			third_color_red =third_color.red;
			third_color_green =third_color.green;
			third_color_blue =third_color.blue;





			

			 

console.log(`The dominant color is ${result[0].color} with ${result[0].count} occurrence(s)`);
// => The  dominant color is rgb(0,0,255) with 2 occurrence(s)

console.log(`The secondary color is ${result[1].color} with ${result[1].count} occurrence(s)`);
// => The  secondary color is rgb(255,0,0) with 1 occurrence(s);
   // const dominantColor = await getColorFromURL('https://5.imimg.com/data5/QS/ID/MY-47947495/mango-oscar-fish-500x500.jpg');
})();



/*
  */



 function getRGB(str){
	
  var match = str.match(/rgba?\((\d{1,3}), ?(\d{1,3}), ?(\d{1,3})\)?(?:, ?(\d(?:\.\d?))\))?/);
  return match ? {
    red: match[1],
    green: match[2],
    blue: match[3]
  } : {};		
}




  

}




 first_color_red(){

	
	return first_color_red;

}

first_color_blue(){
	
	return first_color_blue;

}

first_color_green(){
	
	return first_color_green;


}

second_color_red(){

	
	return second_color_red;

}

second_color_blue(){
	
	return second_color_blue;

}

second_color_green(){
	
	return second_color_green;


}

third_color_red(){

	
	return third_color_red;

}

third_color_blue(){
	
	return third_color_blue;

}

third_color_green(){
	
	return third_color_green;


}



}

module.exports = Scratch3colour;